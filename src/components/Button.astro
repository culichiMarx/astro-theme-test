---
import { moreLocales, themeConfig } from '@/config'
import { getNextGlobalLangPath, getNextSupportedLangPath } from '@/i18n/path'
import { isPostPage, isTagPage } from '@/utils/page'

interface Props {
  supportedLangs: string[]
}

const { light: { background: lightMode }, dark: { background: darkMode } } = themeConfig.color

const { supportedLangs } = Astro.props
const currentPath = Astro.url.pathname
const isPost = isPostPage(currentPath)
const isTag = isTagPage(currentPath)

// Check if there are other languages to switch
const showLanguageSwitcher = true
// Check if only the supported language switch list is used
const useSupportedLangs = isPost || (isTag && supportedLangs.length > 0)
// Choose a language switch list according to the page type
console.log(useSupportedLangs)
console.log(supportedLangs)
const nextUrl = useSupportedLangs
  ? getNextSupportedLangPath(currentPath, supportedLangs) // Switch between supported languages in post/tag page
  : getNextGlobalLangPath(currentPath) // Switch between all languages in other 
console.log(nextUrl)
---

<div
  class:list={[
  'absolute flex gap-6 top-14.6 right-7.25vw min-[823px]:max-[1024px]:right-[calc(50vw-22rem)]',
  '[@supports(-webkit-touch-callout:none)]:top-13.6', // fix position issue on ios
  'lg:(fixed w-14rem top-auto bottom-47 right-[max(5.625rem,calc(50vw-34.375rem))])',
]}
>
  <!-- Language Switcher -->
  {showLanguageSwitcher && (
    <a
      href={nextUrl}
      class="aspect-square w-4 c-secondary active:scale-90 hover:c-primary"
      aria-label="Switch website language"
    >
    <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
      <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m13 19 3.5-9 3.5 9m-6.125-2h5.25M3 7h7m0 0h2m-2 0c0 1.63-.793 3.926-2.239 5.655M7.5 6.818V5m.261 7.655C6.79 13.82 5.521 14.725 4 15m3.761-2.345L5 10m2.761 2.655L10.2 15"/>
    </svg>

    </a>
  )}

  <!-- Theme Toggle -->
  <button
    aria-label="Switch light/dark theme"
    class="button-theme-toggle aspect-square w-4.2 c-secondary active:scale-90 hover:c-primary"
  >
  <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
    <path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="m7.53316 11.8623.00957-.0029m5.58157 7.1424c-.5.515-.9195.8473-1.0611.8903-.4784.1454-5.42881-1.2797-6.23759-3.3305-.80878-2.0507-1.83058-5.8152-1.88967-6.2192-.0591-.40404 1.5599-1.72424 3.59722-2.61073m1.98839 8.05513c-.22637.262-.38955.5599-.55552.8474M13.4999 12c.5.5 1 1.049 2 1.049s1.5-.549 2-1.049m-4-4h.01m3.99 0h.01m-7.01-2.5c0-.28929 2.5-1.5 5-1.5s5 1.13645 5 1.5V12c0 1.9655-4.291 5-5 5-.7432 0-5-3.0345-5-5V5.5Z"/>
  </svg>

  </button>
</div>

<!-- Theme Toggle Script >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> -->
<script is:inline define:vars={{ lightMode, darkMode }}>
// Update theme
function updateTheme() {
  // Toggle website theme
  document.documentElement.classList.toggle('dark')

  // Get current theme
  const isDark = document.documentElement.classList.contains('dark')
  // Update meta theme color
  const metaThemeColor = document.querySelector('meta[name="theme-color"]')
  if (metaThemeColor) {
    metaThemeColor.setAttribute('content', isDark ? darkMode : lightMode)
  }

  // Update theme configuration in local storage
  localStorage.setItem('theme', isDark ? 'dark' : 'light')
  document.dispatchEvent(new Event('theme-changed'))
}

// Bind click event to the button
function setupThemeToggle() {
  // Locate theme toggle button
  const themeToggleButtons = document.querySelectorAll('.button-theme-toggle')
  // Add click listener to each button
  themeToggleButtons.forEach((button) => {
    button.addEventListener('click', () => {
      // If browser doesn't support View Transitions API, update theme directly
      if (!document.startViewTransition) {
        updateTheme()
        return
      }

      // Temporarily add markers during animation to implement view transition and disable CSS transitions
      document.documentElement.style.setProperty('view-transition-name', 'theme-transition')
      document.documentElement.setAttribute('data-theme-transition', '')

      // If browser supports View Transitions API, use it to update theme
      const themeTransition = document.startViewTransition(updateTheme)
      // Remove markers after animation
      themeTransition.finished.then(() => {
        document.documentElement.style.removeProperty('view-transition-name')
        document.documentElement.removeAttribute('data-theme-transition')
      })
    })
  })
}

// Initialize click event (on first load or page transition)
setupThemeToggle()
document.addEventListener('astro:after-swap', setupThemeToggle)
</script>
